<?php


namespace PonHelper\Storage\Devices;


use DI\Annotation\Inject;
use Exception;
use PonHelper\Models\Devices\Device;
use PonHelper\Models\Devices\DeviceAccess;
use PonHelper\Models\Devices\DeviceModel;
use PonHelper\Storage\AbstractStorage;
use PonHelper\Storage\Exceptions\RecordNotFoundException;

/**
 * @method Device fillByArr($object, $fetchArr = [])
 * Class DeviceStorage
 * @package PonHelper\Storage\Devices
 */
class DeviceStorage extends AbstractStorage
{

    /**
     * @Inject
     * @var DeviceAccessStorage
     */
    protected $accessStorage;

    /**
     * @Inject
     * @var DeviceModelStorage
     */
    protected $modelStorage;

    protected $tableName = 'devices';

    /**
     * @param Device $object
     * @return Device
     * @throws Exception
     */
    public function fill($object)
    {
        $fill = parent::fill($object); // TODO: Change the autogenerated stub
        $fill->model = $this->modelStorage->fill((new DeviceModel($fill->model_id)));
        $fill->access = $this->accessStorage->fill((new DeviceAccess($fill->access_id)));
        return $fill;
    }

    /**
     * @param Device $object
     * @return Device
     */
    public function add($object)
    {
        $object->access_id = $object->getAccess()->getId();
        $object->model_id = $object->getModel()->getId();
        return parent::add($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param Device $object
     * @return Device
     */
    public function update($object)
    {
        $object->updated_at = date("Y-m-d H:i:s");
        $object->access_id = $object->getAccess()->getId();
        $object->model_id = $object->getModel()->getId();
        return parent::update($object); // TODO: Change the autogenerated stub
    }

    /**
     * @return Device[]
     */
    function fetchAll() {
        $psth = $this->pdo->prepare("SELECT id, ip, name, description, access_id, model_id, params, created_at, updated_at FROM devices order by  name, id desc");
        $psth->execute();
        $resp = [];
        foreach ($psth->fetchAll() as $e) {
            $device = $this->fillByArr(new Device(), $e);
            $device->setAccess($this->accessStorage->fill((new DeviceAccess())->setId($device->access_id)));
            $device->setModel($this->modelStorage->fill((new DeviceModel())->setId($device->model_id)));
            $resp[] = $device;
        }
        return $resp;
    }

    /**
     * @param $id
     * @return Device
     */
    function getById($id) {
        return $this->getObjectById(Device::class, $id);
    }
    /**
     * @param $ip_address
     * @return Device
     */
    function getByIp($ip_address) {
        $psth = $this->pdo->prepare("SELECT id FROM devices WHERE ip = ?");
        $psth->execute([$ip_address]);
        if($psth->rowCount() === 0) {
            throw new RecordNotFoundException("Device with ip $ip_address not found in storage");
        }
        return $this->getById($psth->fetch()['id']);
    }
}