<?php


namespace PonHelper\Storage;


use Exception;
use PonHelper\Models\User\UserGroup;

/**
 * Class UserGroupStorage
 * @package PonHelper\Storage
 */
class UserGroupStorage extends AbstractStorage
{
    protected $tableName = 'user_groups';


    /**
     * @param UserGroup $object
     * @return UserGroup|null
     */
    function getByName($name) {
        $id = $this->getOneIdByWhere("name=?", [$name]);
        if(!$id) {
            throw new Exception("Group with name $name not found");
        }
        return $this->fill((new UserGroup())->setId($id));
    }

    /**
     * @param UserGroup $object
     * @return UserGroup|null
     */
    function fill($object)
    {
        $object = parent::fill($object);
        if(!$object) return null;
        $object->display = $object->display == 1;
        return $object;
    }

    /**
     * @param UserGroup $object
     * @return UserGroup|null
     */
    function update($object)
    {
        return parent::update($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param UserGroup $object
     * @return UserGroup|null
     */
    function add($object)
    {
        return parent::add($object); // TODO: Change the autogenerated stub
    }

    /**
     * @return UserGroup[]
     */
    public function fetchAll() {
        $psth = $this->pdo->query("SELECT id FROM user_groups");
        $response = [];
        foreach ($psth->fetchAll() as $id) {
            $response[] = $this->fill((new UserGroup())->setId($id['id']));
        }
        return $response;
    }

    /**
     * @param $id
     * @return UserGroup
     */
    public function getById($id) {
        return $this->getObjectById(UserGroup::class, $id);
    }
}