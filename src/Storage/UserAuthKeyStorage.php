<?php


namespace PonHelper\Storage;


use DI\Annotation\Inject;
use PonHelper\Models\User\User;
use PonHelper\Models\User\UserAuthKey;

class UserAuthKeyStorage extends AbstractStorage
{
    protected $tableName = 'user_auth_keys';

    /**
     * @Inject
     * @var UserStorage
     */
    protected $userStorage;


    function fill($object)
    {
        $fillabled = parent::fill($object);
        if (!$fillabled) return null;
        $fillabled->user = $this->userStorage->fill((new User())->setId($fillabled->user_id));
        return $fillabled;
    }

    /**
     * @param string $key
     * @return UserAuthKey|null
     */
    function findByKey(string $key)
    {
        $this->pdo->prepare("UPDATE user_auth_keys SET `status` = 'EXPIRED' WHERE `status` = 'ACTIVE' and expired_at < NOW() and `key` = ?")
            ->execute([$key]);

        $psth = $this->pdo->prepare("SELECT id FROM user_auth_keys WHERE `key` = ?");
        $psth->execute([$key]);
        if ($psth->rowCount() === 0) {
            return null;
        }
        return $this->fill((new UserAuthKey())->setId($psth->fetch()['id']));
    }

    function add($object)
    {
        if ($object->getStatus() === UserAuthKey::STATUS_ACTIVE && \DateTime::createFromFormat("Y-m-d H:i:s", $object->getExpiredAt())->getTimestamp() < time()) {
            $object->setStatus(UserAuthKey::STATUS_EXPIRED);
        }
        $object->user_id = $object->user->id;
        return parent::add($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param $object UserAuthKey
     * @return UserAuthKey
     */
    function update($object)
    {
        if ($object->getStatus() === UserAuthKey::STATUS_ACTIVE && \DateTime::createFromFormat("Y-m-d H:i:s", $object->getExpiredAt())->getTimestamp() < time()) {
            $object->setStatus(UserAuthKey::STATUS_EXPIRED);
        }
        $object->user_id = $object->user->id;
        return parent::update($object); // TODO: Change the autogenerated stub
    }

    function findLastByUser(User $user)
    {
        $id = $this->getOneIdByWhere("user_id = ? order by id desc limit 1", [$user->getId()]);
        if (!$id) {
            $this->pdo->prepare("UPDATE user_auth_keys SET `status` = 'EXPIRED' WHERE `status` = 'ACTIVE' and expired_at < NOW() and `id` = ?")
                ->execute([$id]);
            return null;
        }
        return $this->fill(
            (new UserAuthKey())->setId($id)
        );
    }

    function recalcAllSessionStatus() {
        $resp = $this->pdo->query("UPDATE user_auth_keys SET `status` = 'EXPIRED' WHERE `status` = 'ACTIVE' and expired_at < NOW()");
        return $resp->rowCount();
    }

    /**
     * @param User $user
     * @return UserAuthKey|null
     * @throws \Exception
     */
    function getLastActivityByUser(User $user) {
        $id = $this->getOneIdByWhere("user_id = ? order by last_activity desc limit 1", [$user->getId()]);
        if (!$id) {
            $this->pdo->prepare("UPDATE user_auth_keys SET `status` = 'EXPIRED' WHERE `status` = 'ACTIVE' and expired_at < NOW() and `id` = ?")
                ->execute([$id]);
            return null;
        }
        return $this->fill(
            (new UserAuthKey())->setId($id)
        );
    }

    /**
     * @param User $user
     * @return UserAuthKey[]
     */
    function getSessionsByUser(User $user)
    {
        $this->pdo->prepare("UPDATE user_auth_keys SET `status` = 'EXPIRED' WHERE `status` = 'ACTIVE' and expired_at < NOW() and `id` = ?")
            ->execute([$user->getId()]);
        $data = $this->pdo->prepare("SELECT * FROM user_auth_keys WHERE user_id = ? order by  id desc");
        $data->execute([$user->getId()]);
        $resp = [];
        foreach ($data->fetchAll() as $elem) {
            $resp[] = $this->fillByArr(new UserAuthKey(), $elem);
        }
        return $resp;
    }

}