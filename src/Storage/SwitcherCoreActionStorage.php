<?php


namespace PonHelper\Storage;


use DI\Annotation\Inject;
use PonHelper\Models\Devices\Device;
use PonHelper\Models\SwitcherCoreAction;
use PonHelper\Storage\Devices\DeviceStorage;
use PonHelper\Storage\Exceptions\RecordNotFoundException;

class SwitcherCoreActionStorage extends AbstractStorage
{

    /**
     * @Inject
     * @var DeviceStorage
     */
    protected $deviceStorage;

    /**
     * @Inject
     * @var UserStorage
     */
    protected $userStorage;

    protected $tableName = 'switcher_core_actions';

    /**
     * @param SwitcherCoreAction $object
     * @return SwitcherCoreAction
     * @throws \Exception
     */
    public function fill($object)
    {
        parent::fill($object); // TODO: Change the autogenerated stub
        $object->device = $this->deviceStorage->getById($object->device_id);
        $object->user = $this->userStorage->getById($object->user_id);
        return $object;
    }

    /**
     * @param SwitcherCoreAction $object
     * @return SwitcherCoreAction
     * @throws \Exception
     */
    public function add($object)
    {
        $object->user_id = $object->getUser()->getId();
        $object->device_id = $object->getDevice()->getId();
        $object->hash = sha1("{$object->getDevice()->getAsArray()}{$object->getMethod()}{$object->getArgumentsAsJson()}");
        return parent::add($object); // TODO: Change the autogenerated stub
    }

    public function update($object)
    {
        $object->user_id = $object->getUser()->getId();
        $object->device_id = $object->getDevice()->getId();
        $object->hash = sha1("{$object->getDevice()->getAsArray()}{$object->getMethod()}{$object->getArgumentsAsJson()}");
        return parent::update($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param SwitcherCoreAction $object
     * @return SwitcherCoreAction
     * @throws \Exception
     */
    function updateOnDuplicate($object)
    {
        $object->user_id = $object->getUser()->getId();
        $object->device_id = $object->getDevice()->getId();
        $argv = $object->getArguments();
        ksort($argv);
        $argvJson = json_encode($argv);
        $object->hash = sha1("{$object->getDevice()->getAsArray()}{$object->getMethod()}{$argvJson}");
        return parent::updateOnDuplicate($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param Device $device
     * @param $method
     * @param array $arguments
     * @return SwitcherCoreAction
     * @throws RecordNotFoundException
     */
    function getLastSuccess(Device $device, $method, $arguments = [])
    {
        ksort($arguments);
        $argvJson = json_encode($arguments);
        $hash = sha1("{$device->getDevice()->getAsArray()}{$method}{$argvJson}");
        $psth = $this->pdo->query("SELECT id FROM switcher_core_actions WHERE status = 'SUCCESS' and hash = ? ORDER BY id desc LIMIT 1");
        $psth->execute([$hash]);
        if ($psth->rowCount() === 0) {
            throw new RecordNotFoundException("Not found success record by hash $hash");
        }
        return ($this->getObjectById(SwitcherCoreAction::class, $psth->fetch()['id']));
    }

    function getById($id)
    {
        return ($this->getObjectById(SwitcherCoreAction::class, $id));
    }

    function getResultsByDevice(Device $device)
    {
        $psth = $this->pdo->prepare("
            SELECT id, time, user_id, device_id, status, hash, module, arguments, data
            FROM switcher_core_actions WHERE device_id = ? order by  id desc 
        ");
        $psth->execute([$device->getId()]);
        return $this->prepareResults($psth, ['device' => $device]);
    }

    function getResultsByMethod($methodName)
    {
        $psth = $this->pdo->prepare("
            SELECT id, time, user_id, device_id, status, hash, module, arguments, data
            FROM switcher_core_actions WHERE  module = ? order by  id desc 
        ");
        $psth->execute([$methodName]);
        return $this->prepareResults($psth);
    }

    private function prepareResults(\PDOStatement $psth, $definedObjects = [])
    {
        if ($psth->rowCount() === 0) {
            throw new RecordNotFoundException('Records not found');
        }
        $response = [];
        foreach ($psth->fetchAll() as $row) {
            $coreAction = $this->fillByArr(new Device(), $row);
            if (isset($definedObjects['device'])) {
                $coreAction->device = $definedObjects['device'];
            } else {
                $coreAction->device = $this->deviceStorage->getById($row['device_id']);
            }
            if (isset($definedObjects['user'])) {
                $coreAction->user = $definedObjects['user'];
            } else {
                $coreAction->user = $this->userStorage->getById($row['user_id']);
            }
        }
        return $response;
    }

}