<?php


namespace PonHelper\Storage;


use DI\Annotation\Inject;
use InvalidArgumentException;
use PonHelper\Models\User\User;

class UserStorage extends AbstractStorage
{
    protected $tableName = 'users';

    /**
     * @Inject
     * @var UserGroupStorage
     */
    protected $userGroupStorage;

    /**
     * @param User $object
     * @return User
     */
    public function fill($object)
    {
        $object = parent::fill($object); // TODO: Change the autogenerated stub
        $object->group = $this->userGroupStorage->getById($object->group_id);
        return $object;
    }

    public function add($object)
    {
        $object->group_id = $object->group->getId();
        return parent::add($object);
    }

    public function update($object)
    {
        $object->group_id = $object->group->getId();
        return parent::update($object);
    }

    /**
     * @param string $login
     * @return User
     */
    public function getUserByLogin(string $login) {
        if(!$login) {
            throw new InvalidArgumentException("Login cant empty");
        }
        $psth = $this->pdo->prepare("SELECT id FROM users WHERE login = ?");
        $psth->execute([$login]);
        if($psth->rowCount() === 0) {
            return null;
        }
        $user = (new User())->setId($psth->fetch()['id']);
        return $this->fill($user);
    }

    /**
     * @return User[]
     */
    public function fetchAll() {
        $psth = $this->pdo->query("SELECT id FROM users");
        $response = [];
        foreach ($psth->fetchAll() as $id) {
            $response[] = $this->fill((new User())->setId($id['id']));
        }
        return $response;
    }

    function getById($id) {
        return $this->getObjectById(User::class, $id);
    }
}