<?php


namespace PonHelper\Console\SwitcherCore;


use DI\Annotation\Inject;
use PonHelper\Console\AbstractCommand;
use PonHelper\Controllers\SwitcherCore;
use PonHelper\Storage\Devices\DeviceStorage;
use PonHelper\Storage\UserStorage;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class SwitcherCoreCallModuleCommand extends AbstractCommand
{
    /**
     * @Inject
     * @var SwitcherCore
     */
    protected $core;
    /**
     * @Inject
     * @var DeviceStorage
     */
    protected $devStorage;
    /**
     * @Inject
     * @var UserStorage
     */
    protected $userStorage;

    function configure()
    {
        $this->setName("switcher-core:call")
            ->addArgument("ip", InputArgument::REQUIRED, "Device ip address")
            ->addArgument("module", InputArgument::REQUIRED, "Module name")
            ->addArgument("arguments", InputArgument::IS_ARRAY, "Arguments. For example interface=pon0/1/1")
            ->addOption("meta","m", InputArgument::OPTIONAL, "Show meta", false)
            ->addOption("source", "s", InputArgument::OPTIONAL, "Source to use. Can be device(every call from device),store(every call from store) and cache(if not found in store - can be call from device)", 'device');
        parent::configure(); // TODO: Change the autogenerated stub
    }
    function execute(InputInterface $input, OutputInterface $output)
    {
        $user = $this->userStorage->getById(-2);
        $arguments = [];
        foreach ($input->getArgument('arguments') as $argkv ) {
            list($key,$value) = @explode("=", $argkv);
            $arguments[$key] = $value;
        }
        $core = $this->core->setDevice($this->devStorage->getByIp($input->getArgument('ip')))->setUser($user);
        $response = null;
        switch ($input->getOption('source')) {
            case 'device': $response = $core->fromDevice($input->getArgument('module'), $arguments); break;
            case 'store': $response = $core->fromStore($input->getArgument('module'), $arguments); break;
            case 'cache': $response = $core->fromCache($input->getArgument('module'), $arguments); break;
            default: throw new \InvalidArgumentException("Invalid source {$input->getOption('source')}");
        }
        if(!$input->getOption('meta')) {
           $response = $response['data'];
        }
        $output->writeln(json_encode($response, JSON_PRETTY_PRINT | JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE));
        return self::SUCCESS;
    }
}