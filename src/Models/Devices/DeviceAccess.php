<?php


namespace PonHelper\Models\Devices;


use InvalidArgumentException;
use PonHelper\Models\AbstractModel;

class DeviceAccess extends AbstractModel
{
    /**
     * @morm
     * @var string
     */
    protected $name;

    /**
     * @morm
     * @var string
     */
    protected $community;

    /**
     * @morm
     * @var string
     */
    protected $login;

    /**
     * @morm
     * @var string
     */
    protected $password;

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     * @return DeviceAccess
     */
    public function setName(string $name): DeviceAccess
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @return string
     */
    public function getCommunity(): string
    {
        return $this->community;
    }

    /**
     * @param string $community
     * @return DeviceAccess
     */
    public function setCommunity(string $community): DeviceAccess
    {
        if(!$community) {
            throw new InvalidArgumentException("Community can't be empty");
        }
        if(!preg_match('/^[A-Za-z0-9_]{1,}$/', $community)) {
            throw new InvalidArgumentException("Community isn't correct");
        }
        $this->community = $community;
        return $this;
    }

    /**
     * @return string
     */
    public function getLogin(): string
    {
        return $this->login;
    }

    /**
     * @param string $login
     * @return DeviceAccess
     */
    public function setLogin(string $login): DeviceAccess
    {
        if(!$login) {
            throw new InvalidArgumentException("Login can't be empty");
        }
        if(!preg_match('/^[A-Za-z0-9_]{1,}$/', $login)) {
            throw new InvalidArgumentException("Login isn't correct");
        }
        $this->login = $login;
        return $this;
    }

    /**
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * @param string $password
     * @return DeviceAccess
     */
    public function setPassword(string $password): DeviceAccess
    {
        if(!$password) {
            throw new InvalidArgumentException("Password can't be empty");
        }
        $this->password = $password;
        return $this;
    }

    function __toString()
    {
        return $this->name; // TODO: Change the autogenerated stub
    }


}